---
title: Compensazione di latenza
slug: latency-compensation
date: 0007/01/02
number: 7.5
sidebar: true
contents: Capire la compensazione di latenza.|Rallentare la costruzione l'applicazione per capire meglio come funziona.|Capire come i metodi di Meteor si chiamano tra di loro.
paragraphs: 28
---

Nell'ultimo capitolo abbiamo introdotto un nuovo concetto nell'universo di Meteor: i **Metodi**.

<%= diagram "latency1", "Without latency compensation", "pull-right" %>

Un Metodo di Meteor è un modo per eseguire una serie di comandi sul server in maniera strutturata. Nel nostro esempio abbiamo usato un Metodo perchè vogliamo che i nuovi post siano taggati con il nome e l'id dell'autore e con l'orario corrente del server.

Tuttavia se Meteor eseguisse i Metodi nel modo più semplice avremmo un problema. Considerate questa sequenza di eventi (nota: i timestamp sono valori casuali presi per semplice scopo illustrativo):

- *+0ms:* L'utente clicca su un bottone di submit e il browser scatena una chiamata al Metodo.
- *+200ms:* Il server esegue le modifiche sul database di Mongo.
- *+500ms:* Il client riceve le modifiche e aggiorna l'interfaccia utente per visualizzarle.

Se questo fosso il modo in cui funziona Meteor ci sarebbe un breve ritardo tra l'esecuzione di queste azioni e il risultato (il ritardo sarebbe più o meno sensibile, dipende da quanto vicini siete al server). Non è accettabile in una moderna applicazione web!

### Compensazione di latenza

<%= diagram "latency2", "With latency compensation", "pull-right" %>

////

////

- *+0ms:* ////
- *+0ms:* ////
- *+200ms:* ////
- *+500ms:* ////

////

### Observing Latency Compensation

////

////

////

~~~js
Meteor.methods({
  post: function(postAttributes) {
    // […]
    
    // pick out the whitelisted keys
    var post = _.extend(_.pick(postAttributes, 'url', 'message'), {
      title: postAttributes.title + (this.isSimulation ? '(client)' : '(server)'),
      userId: user._id, 
      author: user.username, 
      submitted: new Date().getTime()
    });
    
    // wait for 5 seconds
    if (! this.isSimulation) {
      var Future = Npm.require('fibers/future');
      var future = new Future();
      Meteor.setTimeout(function() {
        future.return();
      }, 5 * 1000);
      future.wait();
    }
    
    var postId = Posts.insert(post);
    
    return postId;
  }
});
~~~
<%= caption "collections/posts.js" %>
<%= highlight "6, 7, 13~22" %>

////

////

////

~~~js
Template.postSubmit.events({
  'submit form': function(event) {
    event.preventDefault();
    
    var post = {
      url: $(event.target).find('[name=url]').val(),
      title: $(event.target).find('[name=title]').val(),
      message: $(event.target).find('[name=message]').val()
    }
    
    Meteor.call('post', post, function(error, id) {
      if (error)
        return alert(error.reason);
    });
    Router.go('postsList');
  }
});
~~~
<%= caption "client/views/posts/post_submit.js" %>
<%= highlight "15" %>

<%= scommit "7-5-1", "Demonstrate the order that posts appear using a sleep." %>

////

<%= screenshot "s5-1", "Our post as first stored in the client collection" %>

////

<%= screenshot "s5-2", "Our post once the client receives the update from the server collection" %>

### Client Collection Methods

////

////

1. ////
2. ////
  
### Methods Calling Methods

////
 
////

////
