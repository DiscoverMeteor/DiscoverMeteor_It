---
title: Notifications
slug: notifications
date: 0011/01/01
number: 11
points: 10
photoUrl: http://www.flickr.com/photos/ikewinski/8719868039/
photoAuthor: Mike Lewinski
contents: Aggiungere una collection per le notifiche per informare gli utenti delle azioni di altri utenti |. Imparare a condividere solo le notifiche relative a un determinato utente |. Saperne di più su pubblicazioni Meteor e sottoscrizioni.
---

Ora che gli utenti possono commentare sui rispettivi posti, sarebbe bene far loro sapere che una conversazione è iniziata.

Per farlo, informeremo il proprietario del post che c'è stato un commento proprio post, e li forniremo un link per visualizzare quel commento. 

Questo è il tipo di caratteristica in cui Meteor brilla davvero: perché Meteor è in realtime di default, mostremo quelle notifiche _istantaneamente_. Non abbiamo bisogno di aspettare che l'utente aggiorni la pagina o che la controlli in qualsiasi modo, possiamo semplicemente far apparire le notifiche senza dover mai scrivere alcun codice speciale.

### Creare le notifiche

Creeremo una notifica quando qualcuno commenta sui tuoi post. In futuro, le notifiche potrebbero essere estese per coprire molti altri scenari, ma per ora questo sarà sufficiente per tenere gli utenti informati su quello che sta succedendo.

Creiamo la nostra collection `Notifications`, così come una funzione `createCommentNotification` che inserirà una notifica corrispondente per ogni nuovo commento su uno dei tuoi post:

~~~js
Notifications = new Meteor.Collection('notifications');

Notifications.allow({
  update: ownsDocument
});

createCommentNotification = function(comment) {
  var post = Posts.findOne(comment.postId);
  if (comment.userId !== post.userId) {
    Notifications.insert({
      userId: post.userId,
      postId: post._id,
      commentId: comment._id,
      commenterName: comment.author,
      read: false
    });
  }
};
~~~
<%= caption "collections/notifications.js" %>

Così come per i post e i commenti, questa collection `Notifications` sarà condivisa tra client e server. Come abbiamo bisogno di aggiornare le notifiche, una volta che un utente le ha viste, dobbiamo anche abilitare gli aggiornamenti, assicurando come al solito che limitiamo autorizzazioni di aggiornamento ai soli dati in possesso dell'utente. 

Abbiamo anche creato una semplice funzione che osserva il post che l'utente sta commentando, scopre chi dovrebbe essere notificato, e inserisce una nuova notifica. 

Stiamo già creando i commenti in un metodo lato server, quindi possiamo solo aumentare tale metodo da chiamare la nostra funzione. Sostituiremo `return Comments.insert(comment);` by `comment._id = Comments.insert(comment)`, al fine di salvare il `_id` del commento appena creato in una variabile, quindi chiamare la nostra funzione `createCommentNotification`:

~~~js
Comments = new Meteor.Collection('comments');

Meteor.methods({
  comment: function(commentAttributes) {

    // [...]

    // create the comment, save the id
    comment._id = Comments.insert(comment);
    
    // now create a notification, informing the user that there's been a comment
    createCommentNotification(comment);
    
    return comment._id;
  }
});
~~~
<%= caption "collections/comments.js" %>
<%= highlight "8~14" %>

////

~~~js
// [...]

Meteor.publish('notifications', function() {
  return Notifications.find();
});
~~~
<%= caption "server/publications.js" %>

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  waitOn: function() { 
    return [Meteor.subscribe('posts'), Meteor.subscribe('notifications')]
  }
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "5" %>

<%= commit "11-1", "Aggiunta una collection base per le notifiche." %>

### Visualizzare le notifiche

Ora possiamo andare avanti e aggiungere una lista di notifiche nel header.

~~~html
<template name="header">
  <header class="navbar">
    <div class="navbar-inner">
      <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </a>
      <a class="brand" href="{{pathFor 'postsList'}}">Microscope</a>
      <div class="nav-collapse collapse">
        <ul class="nav">
          {{#if currentUser}}
            <li>
              <a href="{{pathFor 'postSubmit'}}">Invia Post</a>
            </li>
            <li class="dropdown">
              {{> notifications}}
            </li>
          {{/if}}
        </ul>
        <ul class="nav pull-right">
          <li>{{loginButtons}}</li>
        </ul>
      </div>
    </div>
  </header>
</template>
~~~
<%= caption "client/views/includes/header.html" %>
<%= highlight "12~19" %>

////

~~~html
<template name="notifications">
  <a href="#" class="dropdown-toggle" data-toggle="dropdown">
    Notifications
    {{#if notificationCount}}
      <span class="badge badge-inverse">{{notificationCount}}</span>
    {{/if}}
    <b class="caret"></b>
  </a>
  <ul class="notification dropdown-menu">
    {{#if notificationCount}}
      {{#each notifications}}
        {{> notification}}
      {{/each}}
    {{else}}
      <li><span>No Notifications</span></li>
    {{/if}}
  </ul>
</template>

<template name="notification">
  <li>
    <a href="{{notificationPostPath}}">
      <strong>{{commenterName}}</strong> commented on your post
    </a>
  </li>
</template>
~~~
<%= caption "client/views/notifications/notifications.html" %>

////

////

~~~js
Template.notifications.helpers({
  notifications: function() {
    return Notifications.find({userId: Meteor.userId(), read: false});
  },
  notificationCount: function(){
    return Notifications.find({userId: Meteor.userId(), read: false}).count();
  }
});

Template.notification.helpers({
  notificationPostPath: function() {
    return Router.routes.postPage.path({_id: this.postId});
  }
})

Template.notification.events({
  'click a': function() {
    Notifications.update(this._id, {$set: {read: true}});
  }
})
~~~
<%= caption "client/views/notifications/notifications.js" %>

<%= commit "11-2", "Visualizza le notifiche in cima." %>

////

////

<%= screenshot "11-1", "Displaying notifications." %>

### Controlling access to notifications

////

////

~~~js
❯ Notifications.find().count();
1
~~~
<%= caption "Browser console" %>

////

////

////

////

////

~~~js
Meteor.publish('notifications', function() {
  return Notifications.find({userId: this.userId});
});
~~~
<%= caption "server/publications.js" %>

<%= commit "11-3", "Only sync notifications that are relevant to the user." %>

////

~~~js
❯ Notifications.find().count();
1
~~~
<%= caption "Browser console (user 1)" %>

~~~js
❯ Notifications.find().count();
0
~~~
<%= caption "Browser console (user 2)" %>

////

////
