---
title: Utilizzare Git & GitHub
slug: github
date: 0003/01/02
number: 3.5
sidebar: true
contents: Impara come utilizzare GitHub seguire passo passo il codice del libro.
paragraphs: 32
---

[GitHub](https://github.com/) è un deposito di stampo social per progetti open-source che si basa sul sistema di controllo versione [Git](http://git-scm.com/), il cui obiettivo principale è quello di rendere semplice il condividere codice e collaborare su progetti. E' anche un gran strumento per l'apprendimento. In questo approfondimento, daremo un rapido sguardo su alcuni modi in cui potete utilizzare GitHub per seguire *Discover Meteor*. 

Questo approfondimento presume che non conosciate molto Git e GitHub. Se invece li utilizzate già entrambi, sentitevi liberi di passare direttamente al prossimo capitolo!

### Being Committed

La componente di base dell'uso di un repository Git è un *commit*. Si può pensare ad un commit come a un'istantanea che fotografa lo stato del vostro codice in un dato momento nel tempo.

Invece di dare semplicemente il codice completo di Microscope, abbiamo preso queste istantanee ad ogni passaggio della lavorazione, e le abbiamo rese tutte disponibili su GitHub.

Per esempio, questo è quello che si può vedere nell'[ultimo commit dello scorso capitolo](https://github.com/DiscoverMeteor/Microscope/commit/chapter3-2):

<%= screenshot "s3-1", "A Git commit as shown on GitHub." %>

Quello che si vede qui sotto è un “diff” (sta per “differenza”) del file `post_item.js`, in altre parole i cambiamenti inseriti in questo commit. In questo caso abbiamo creato il file `post_item.js` da zero, perciò tutti i suoi contenuti sono evidenziati in verde.

Facciamo un confronto con un esempio preso [un po' più avanti nel libro](https://github.com/DiscoverMeteor/Microscope/commit/chapter13-1):

<%= screenshot "s3-2", "Modifying code." %>

Questa volta solo le righe che sono state modificate sono evidenziate in verde.

Ovviamente, qualche volts non vengono aggiunte o modificate delle righe di codice, ma [vengono eliminate](https://github.com/DiscoverMeteor/Microscope/commit/chapter12-2):

<%= screenshot "s3-3", "Deleting code." %>

Questo è il principale utilizzo di GitHub: poter vedere cosa è cambiato con una sola occhiata.

### Browsing A Commit's Code

////

////

<%= screenshot "s3-5", "The Browse code button." %>

////

<%= screenshot "s3-6", "The repository at commit 3-2." %>

////

<%= screenshot "s3-7", "The repository at commit 14-2." %>

### Accessing A Commit Locally

////

////

~~~bash
$ git clone git@github.com:DiscoverMeteor/Microscope.git github_microscope
~~~

////

////

~~~bash
$ cd github_microscope
~~~

////

////

~~~bash
$ git checkout chapter3-1
Note: checking out 'chapter3-1'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at a004b56... Added basic posts list template and static data.
~~~

////

////

////

////

<%= screenshot "s3-4", "Finding a commit hash." %>

////

~~~bash
$ git checkout c7af59e425cd4e17c20cf99e51c8cd78f82c9932
Previous HEAD position was a004b56... Added basic posts list template and static data.
HEAD is now at c7af59e... Augmented the postsList route to take a limit
~~~

////

~~~bash
$ git checkout master
~~~

### Historical Perspective

////

////

<%= screenshot "s3-8", "GitHub's History button." %>

////

<%= screenshot "s3-9", "Displaying a file's history." %>

### The Blame Game

////

<%= screenshot "s3-10", "GitHub's Blame button." %>

////

<%= screenshot "s3-11", "GitHub's Blame view." %>

////
