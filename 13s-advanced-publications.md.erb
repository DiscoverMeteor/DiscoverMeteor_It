---
title: Pubblicazioni avanzate
slug: advanced-publications
date: 0013/01/02
number: 13.5
points: 10
sidebar: true
photoUrl: http://www.flickr.com/photos/ikewinski/8390558986/
photoAuthor: Mike Lewinski
contents:
Impare delle tecniche più avanzate per manipolare le pubblicazioni.| Guarda quanto possono essere flessibili le pubblicazioni e le sottoscrizioni.
paragraphs: 36
---

A questo punto dovresti avere una buona comprensione di come pubblicazioni e sottoscrizioni interagiscono. Quindi cerchiamo di sbarazzarci delle ruote di supporto ed esaminare un paio di scenari avanzati.

### Pubblicare una collezione più volte

Nel [nostro primo approfondimento sulle pubblicazioni](/chapter/publications-and-subscriptions/), abbiamo visto alcune delle tecniche più comuni su pubblicazioni e sottoscrizioni, ora abbiamo imparato come la funzione `_publishCursor` le ha resi molto facili da implementare sui nostri siti.

Iniziamo ricordando cosa `_publishCursor` fa per noi esattamente: prende tutti i documenti che corrispondono a un certo cursore e li invia alla collezione *con lo stesso nome* sul client. Da notare che il nome della _pubblicazione_ non è coinvolto.

Questo significa che possiamo avere _più di una pubblicazione_ di collegamento tra le collezioni sul client e sul server.

Abbiamo già incontrato questo pattern nel nostro [capitolo  sulla paginazione](/chapter/pagination/), quando abbiamo pubblicato un sottoinsieme paginato di tutti i post in aggiunta al post corrente visualizzato.

Un altro simile caso d'uso è quello di pubblicare una *panoramica* di un grande set di documenti, come anche tutti i dettagli di un singolo elemento:

<%= diagram "doublecollection", "Pubblicare una collezione due volte", "pull-center" %>

~~~js
Meteor.publish('allPosts', function() {
  return Posts.find({}, {fields: {title: true, author: true}});
});

Meteor.publish('postDetail', function(postId) {
  return Posts.find(postId);
});
~~~

////

////

////

////

~~~js
Meteor.publish('newPosts', function(limit) {
  return Posts.find({}, {sort: {submitted: -1}, limit: limit});
});

Meteor.publish('bestPosts', function(limit) {
  return Posts.find({}, {sort: {votes: -1, submitted: -1}, limit: limit});
});
~~~
<%= caption "server/publications.js" %>

### Subscribing to a Publication Multiple Times

////

////

////

<%= diagram "subscribetwice", "Subscribing twice to one publication", "pull-center" %>

////

~~~js
Meteor.publish('posts', function(options) {
  return Posts.find({}, options);
});
~~~

////

~~~js
Meteor.subscribe('posts', {submitted: -1, limit: 10});
Meteor.subscribe('posts', {baseScore: -1, submitted: -1, limit: 10});
~~~

////

////

### Multiple Collections in a Single Subscription

////

////

////

////

////

////

////

<%= diagram "multiplecollections", "Two collections in one subscription", "pull-center" %>

~~~js
Meteor.publish('topComments', function(topPostIds) {
  return Comments.find({postId: topPostIds});
});
~~~

////

////

~~~js
Meteor.publish('topPosts', function(limit) {
  var sub = this, commentHandles = [], postHandle = null;

  // send over the top two comments attached to a single post
  function publishPostComments(postId) {
    var commentsCursor = Comments.find({postId: postId}, {limit: 2});
    commentHandles[post._id] =
      Meteor.Collection._publishCursor(commentsCursor, sub, 'comments');
  }

  postHandle = Posts.find({}, {limit: limit}).observeChanges({
    added: function(id, post) {
      publishPostComments(post._id);
      sub.added('posts', id, post);
    },
    changed: function(id, fields) {
      sub.changed('posts', id, fields);
    },
    removed: function(id) {
      // stop observing changes on the post's comments
      commentHandles[id] && commentHandles[id].stop();
      // delete the post
      sub.removed('posts', id);
    }
  });

  sub.ready();

  // make sure we clean everything up (note `_publishCursor`
  //   does this for us with the comment observers)
  sub.onStop(function() { postsHandle.stop(); });
});
~~~

////

////

////

### Linking different collections

////

<%= diagram "linkedcollections", "One collection for two subscriptions", "pull-center" %>

////

////

////

////

~~~js
  Meteor.publish('videos', function() {
    var sub = this;

    var videosCursor = Resources.find({type: 'video'});
    Meteor.Collection._publishCursor(videosCursor, sub, 'videos');

    // _publishCursor doesn't call this for us in case we do this more than once.
    sub.ready();
  });
~~~

////

////
