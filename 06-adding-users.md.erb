---
title: Aggiungere Utenti
slug: adding-users
date: 0006/01/01
number: 6
contents: Imparare ad utilizzare gli account utente in Meteor.|Aggiungere l'autenticazione necessaria per Microscope.|Utilizzare il package accounts-ui per implementare rapidamente l'interfaccia utente.
paragraphs: 27
---
Sinora si è lavorato alla creazione e visualizzazione di dati statici in modo ragionevole e messi insieme in un semplice prototipo

E' stato verificato come l'interfaccia utente sia reattiva in seguito a cambiamento nei dati, e inserimenti o modifiche vengono presentati immediatamente. Tuttavia, il sito è ancora penalizzato dal fatto che non è possibile inserire dati. E infatti ancora non vengono neanche gestiti gli utenti.

Vediamo come sia possibile sistemare la cosa.

### Account: utenti resi semplici

In molti framework per il web, aggiungere profili utente è un ostacolo frequente. Sicuramente è un requisito di qualunque progetto, ma non è mai così semplice come invece dovrebbe. Inoltre, non appena si rende necessario avere a che fare con OAuth o altri schemi di autenticazione di terze parti, le cose tendono a complicarsi velocemente.

Fortunatamente, Meteor ha la soluzione. Grazie alla modalità con cui i package di Meteor possono fornire codice sia lato server (JavaScript) che lato client (JavaScript, HTML e CSS), è possibile avere un sistema di gestione degli account quasi a costo zero.

E' sufficiente utilizzare l'interfaccia utente per gli account integrata in Meteor (tramite `mrt add accounts-ui`), ma poiché  l'intera applicazione utilizza Bootstrap, verrà invece utilizzato il package `accounts-ui-bootstrap-dropdown` (niente di cui preoccuparsi, la sola differenza riguarda lo stile). Da linea di comando, scrivere:

~~~bash
$ mrt add accounts-ui-bootstrap-dropdown
$ mrt add accounts-password
~~~
<%= caption "Terminal" %>

Questi due comandi rendono disponibili gli appositi template per gli account; è possibile includerli nel sito utilizzando `{{loginButtons}}`. Un consiglio molto utile: si può controllare su quale lato posizionare il menù a tendina utilizzando l'attributo `align` (ad esempio: `{{loginButtons align="right"}}).

E' tempo di aggiungere i pulsanti all'header. E poiché l'header comincia a crescere oltremodo, è meglio concedergli un po' più di spazio spostandolo su un apposito template (che verrà salvato in `client/views/includes/`). Verrà utilizzato del markup aggiuntivo e alcune classi Bootstrap per renderlo esteticamente migliore:

~~~html
<template name="layout">
  <div class="container">
    {{>header}}
    <div id="main" class="row-fluid">
      {{yield}}
    </div>
  </div>
</template>
~~~
<%= caption "client/views/application/layout.html" %>
<%= highlight "6" %>

~~~html
<template name="header">
  <header class="navbar">
    <div class="navbar-inner">
      <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </a>
      <a class="brand" href="{{pathFor 'postsList'}}">Microscope</a>
      <div class="nav-collapse collapse">
        <ul class="nav pull-right">
          <li>{{loginButtons}}</li>
        </ul>
      </div>
    </div>
  </header>
</template>
~~~
<%= caption "client/views/includes/header.html" %>

Ora, accedendo all'applicazione, i pulsanti per il login saranno visualizzati nell'angolo in alto a destra del sito.

<%= screenshot "6-1", "Interfaccia utente per la gestione degli account integrata in Meteor" %>

E' possibile utilizzarli per il login, la registrazione, per richiedere la modifica della password, e tutto ciò che un semplice sito necessita per gli account basati su password.

Per informare il sistema di gestione degli account riguardo la volontà di autenticare gli utenti mediante nome utente, è sufficiente aggiungere un blocco di configurazione `Accounts.ui` in un nuovo file `config.js` dentro `client/helpers/`:

~~~js
Accounts.ui.config({
  passwordSignupFields: 'USERNAME_ONLY'
});
~~~
<%= caption "client/helpers/config.js" %>

<%= commit "6-1", "Aggiunta gestione account e aggiunto template all'header" %>

### Creazione del primo utente

Procedendo e registrandosi per un account, il pulsante di registrazione "Sign in" cambierà  per visualizzare il nome utente prescelto. Ciò conferma che un account utente è stato creato. Ma da dove provengono i dati relativi all'account utente?

Con l'aggiunta del package `accounts`, Meteor ha creato una nuova collezione speciale, alla quale si può accedere come `Meteor.users`. Per consultarne il contenuto, aprire la console del browser e digitare:

~~~js
❯ Meteor.users.findOne();
~~~
<%= caption "Console del browser" %>

La console dovrebbe restituire un oggetto che rappresenta l'utente sopra creato; ad una osservazione più attenta si nota che il nome utente è incluso, così come un campo `_id` che identifica in maniera univoca l'utente. Da notare che è possibile ottenere l'utente correntemente autenticato tramite `Meteor.user()`.

Proviamo ora ad uscire e rientrare con un differente nome utente. `Meteor.user()` adesso dovrebbe restituire un secondo utente. Tuttavia, se si prova ad eseguire:

~~~js
❯ Meteor.users.find().count();
1
~~~
<%= caption "Browser console" %>

La console restituisce 1. Non dovrebbe invece essere 2? E' stato eliminato il primo utente? Provando ad accedere utilizzando il primo account, si verifica immediatamente che non è questo il caso.

E' meglio assicurarsi controllando l'archivio dati predefinito, il database Mongo. Autentichiamoci in Mongo (`meteor mongo` da terminale) per verificare:

~~~bash
> db.users.count()
2
~~~
<%= caption "Mongo console" %>

Indubbiamente ci sono due utenti. Quindi perché solo uno per volta è visibile dal browser?

### A Mystery Publication!

////

////

////

////

////

////

~~~bash
> db.users.findOne()
{
  "createdAt" : 1365649830922,
  "_id" : "kYdBd9hr3fWPGPcii",
  "services" : {
    "password" : {
      "srp" : {
        "identity" : "qyFCnw4MmRbmGyBdN",
        "salt" : "YcBjRa7ArXn5tdCdE",
        "verifier" : "df2c001edadf4e475e703fa8cd093abd4b63afccbca48fad1d2a0986ff2bcfba920d3f122d358c4af0c287f8eaf9690a2c7e376d701ab2fe1acd53a5bc3e843905d5dcaf2f1c47c25bf5dd87764d1f58c8c01e4539872a9765d2b27c700dcdedadf5ac82521467356d3f91dbeaf9848158987c6d359c5423e6b9cabf34fa0b45"
      }
    },
    "resume" : {
      "loginTokens" : [
        {
          "token" : "BMHipQqjfLoPz7gru",
          "when" : 1365649830922
        }
      ]
    }
  },
  "username" : "tmeasday"
}
~~~
<%= caption "Mongo console" %>

////

~~~js
❯ Meteor.users.findOne();
Object {_id: "kYdBd9hr3fWPGPcii", username: "tmeasday"}
~~~
<%= caption "Browser console" %>

////

////

