---
title: The Session
slug: the-session
date: 0005/01/02
number: 5.5
sidebar: true
contents: L'oggetto Session in Meteor|La funzione autorun|Il ricaricamento automatico ed a caldo del codice
paragraphs: 33
---

Meteor è un framework reattivo. Ciò significa che al variare dei dati la nostra applicazione si aggiorna senza la necessità di fare nulla di specifico.

Abbiamo già visto all'opera questo meccanismo sui template che si aggiornano al variare dei dati e delle route.

Approfondiremo questo meccanismo nei prossimi capitoli, ma ora vogliamo introdurre alcune caratteristiche di base usate spesso nelle applicazioni.

### L'oggetto Session in Meteor

In questo momento in Microscope lo stato dell'applicazione è interamente contenuto nell'URL che l'utente sta consultando (e nel database).

In molti casi però hai bisogno di alcune informazioni transitorie sullo stato dell'applicazione, rilevanti solo per l'istanza corrente dell'applicazione di uno specifico utente (ad esempio se un elemento è mostrato o nascosto). L'oggetto Session è perfetto per questo.

L'oggetto Session è un contenitore dati globale e reattivo. E' globale nel senso di un unico oggetto visibile ovunque: c'è una sola sessione ed è accessibile dall'intera applicazione. Le variabili globali sono normalmente viste male ma in questo caso l'oggetto Session è usato come centro di comunicazione tra tutte le parti dell'applicazione.

### Memorizzare dati nell'oggetto Session

L'oggetto Sessione è visibile ovunque come `Sessione. Per impostare un valore si invoca:

~~~js
❯ Session.set('pageTitle', 'A different title');
~~~
<%= caption "Browser console" %>

I dati memorizzati posso essere letti con `Session.get('mySessionProperty');`. E' una sorgente dati reattiva, quindi se utilizzata all'interno di un helper vedremo l'output dell'helper modificarsi automaticamente al cambio dei dati.

Per fare una prova, aggiungi questo codice al template di layout:

~~~html
<header class="navbar">
  <div class="navbar-inner">
    <a class="brand" href="{{pathFor 'postsList'}}">{{pageTitle}}</a>
  </div>
</header>
~~~
<%= caption "client/views/application/layout.html"%>

~~~js
Template.layout.helpers({
  pageTitle: function() { return Session.get('pageTitle'); }
});
~~~
<%= caption "client/views/application/layout.js"%>

Il meccanismo di ricaricamento automatico del codice di Meteor (noto come "hot code reload" o HCR) preserva lo stato delle variabili di sessione, e quindi ora dovremmo vedere "A different title" nella barra di navigazione. Se no occorre ridigitare il comando `Session.set()` di nuovo.

Inoltre se cambiamo ancora una volta il valore (nuovamente nella console del browser), vedremo il nuovo titolo:

~~~js
❯ Session.set('pageTitle', 'A brand new title');
~~~
<%= caption "Browser console" %>

L'oggetto Session è visibile globalmente, quindi le variazioni possono essere fatte ovunque nell'applicazione. Questo ci da molto potere, ma può anche trasformarsi in una trappola, se ne abusiamo.

<% note do %>

### Identical Changes

////

<% end %>

### Introducing Autorun

////

////

~~~js
helloWorld = function() {
  alert(Session.get('message'));
}
~~~

////

////

////

~~~js
❯ Deps.autorun( function() { console.log('Value is: ' + Session.get('pageTitle')); } );
Value is: A brand new title
~~~
<%= caption "Browser console" %>

////

~~~js
❯ Session.set('pageTitle', 'Yet another value');
Value is: Yet another value
~~~
<%= caption "Browser console" %>

////

////

~~~js
Deps.autorun(function() {
  alert(Session.get('message'));
});
~~~

////

### Hot Code Reload

////

////

////

~~~js
❯ Session.set('pageTitle', 'A brand new title');
❯ Session.get('pageTitle');
'A brand new title'
~~~
<%= caption "Browser console" %>

////

~~~js
❯ Session.get('pageTitle');
'A brand new title'
~~~
<%= caption "Browser console" %>

////

////

////

~~~js
❯ Session.get('pageTitle');
null
~~~
<%= caption "Browser console" %>

////

////

1. ////
2. ////